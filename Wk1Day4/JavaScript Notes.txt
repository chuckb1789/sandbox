JavaScript Syntax
  Statement based syntax.

  Comments:
    HTML <!----html comment--!>
    CSS /* CSS comment */
    JavaScript //javascript single line comment
              /*
              javascript block comment
              */

  Variables:
    Declaring a variable = here is a function that will fun for X (for example)

    var foo; // 'declare' a variable named foo
    var numberofStaff = 5; // 'defining' a variable by giving it a value
    var name = "Joe";  // variables can be of different types
    var otherName = name // you can set a variable to another variable
    __myVariable = 3;
    $$variableName
    student 1

    Rules of Variables:
      must start with a letter (upper or lowercase), underscore, or a '$'.
      May also use underscores and numbers after the first character.
      Variable names should not have special characters.
      snake-case-names-are-ok


    Variable Types (5 primitive types of variables):
      String - the value of a string can be expressed with single quotes or double quotes
      Number -
      Boolean - (true or false (1 or 0))
      null - general programming language, the variable is declared but the value is undefined.
      undefined -

    Number:
      a number can be integer, float, exponent, long, double, etc.  (any kind of number)

    Literals: (numeric values)
      values for things that are not variables. ex. 2 // simple integer
      3.14159 // decimal  (float, long, double)
      1e6 // scientific notation, exponentials, etc.

    String Variables:
      'hello world'
      "quotation for famous sayings"
      "we don't care about special characters inside quotes."
      'he said, "we don\'t care!"' //use a backslash to 'literal' or 'escape' a character.
      'how do we literal a backslash?' \\my value\\' // \my value\
      'there are also special characters like EOL (end of line)/return/carriage return/newline that is literals

      There are other special characters like \t (tab) that you can Google if needed.

    String Operators:
      + // concatenation, combine two strings together
      Ex.
        name = 'joe'
        lastname = 'smith'
        fullname = name + lastname //joesmith
        fullname = name.concat (lastname)

      Binary operators operate using two variables/values.
        Ex.
          joe+2
      Unary operates operate on a single variable.
      ++
      --
      **

      Ex.
        index++ // this is the same as saying index = index + 1
        index** // this is the same as saying index = index * index (extremely rare)

    Binary Operators:
      +, -, /, *, % (modulus)
      Binary operators operate

    Strings are Objects (like most evertyhing else in Javascript)
    Ex.
      var str = 'string'
      str.length // 6
      str [0] // 's'
      str [5] // 'g'
      str [3] // 'i'

    Boolean:
      Boolean/Comparison Operators
        >   greater than
        <   less than
        >=  greater than or equal to
        <=  less than or equal to
        ==  is equal
        === is literally equal or is the same exact variable (X = 1, Y = 1, X === X, Y===Y, not X===Y)

*Dont use '=' alone. That is an assignment operator.

    Logical Operators:
      !   not
      !=  not equal to
      &&  and
      ||  or
   Statements:
      Whitespace is ignored in statements.
      Statements can optionally end with a semicolon.

  Conditional Statements:
    Ex.
      "If I have 3 cups of coffee, I'm jazzed!"

      var cups;
      ...
      if (cups == 3) {
         I = 'jazzed';
      } else if { cups == '15' {
         I = 'wired!';
      }
        else {
         I = 'asleep';
      }

      Generically:
        if (condition) { //then
          // do this stuff
        }

      Truthy && Falsey
        There are some 'falsey' conditions in javascript that will resolve to false, but may not be obvious.

        0 is falsey. Any non-zero number is TRUTHY
        NaN - not a number is 'falsey'
        Null and undefined are 'falsey'

Javascript Structures: Arrays, Objects, & Loops

  Array:
    list of items,
      Ex.
        var days = ['Sunday', 'Monday', 'Tuesday'] //an array of the same type of element homogenous
        var stuff = [1, 'string', true, days [0]]; //an array with different types of elements - heterogenous

        days.push () - adds an element to the end of an array.
        days.pop () -
        days.shift

        var index=0;
        index++ //increment
        index+= 2; //increment by 2
        index-= 1; //the same as index-- or index = index - 1

  Loop:
    FOR LOOP:
    for (var i = 0;      //initializer statement
     i < days.length;   //conditional termination statement
     i++) {             //incrementor
            console.log(days [i]);
            }

      Typically seen as:
          for (var i = 0; i< days.length; i++) {
            if ( i % 2 == 0 ) {console.log (days [i])}     //only log even numbered days.

    var nums = [1,2,3,4,5,6,7,8,9]
    var i=0;
    while (i<5) {
      console.log(days [i]);
      i++;
    }

    while (nums--) {
      console.log(nums)
    }

  Objects:

    var movieName = 'Rogue 1';
    var movieLength = 93;
    var movieGenre = 'SciFi'

         better

    var rogue1 = {
      name : 'Rogue 1',
      length : 93,
      genre : 'SciFi'
    }

    var thor = {
    name : 'Thor',
    length : 124,
    genre : 'SciFi'
    }
                                    //Don't need to designate a var for Jaws because it is being included int eh var movies, it doesn't have a name but is part of the array.
    var movies = [rogue1, thor, { name: 'Jaws', length:44, genre: 'Thriller'}]

Ways of Accessing the Properties of an Array:
    thor.name = 'My Thor';
    movies[2].name = 'More Jaws';
    movies[2].('genre');
    thor['genre']

    movies.push({name: 'Other Movie Name', Length:23, star: 'Justin Beiber'})

    for (var i=0, i < movies.length;i++ ) {
      console.log(movies[i]);
    }



EXAMPLE:
  var fiat = {
      wheelsFlat : true,
      make : 'Fiat' ,
      model: 'Spider' ,
      year : 1970
      stereo : 'awesome'
  }

  var cruzer =

JS - FUNCTIONS:
    4 components to a function:
        reserved word 'function'
        name (optional)
        set of parameters/arguments
        set of statements - the body of the function
EC5 Syntax

    //Function declaring
    //this function can be called/invoked anywhere in the file since its declared at compile time.
    function calculateArea (length, height) { //inputs are called parameters
      var area = length * height;
      return area;                            //return will give a value back after invoking the function.
    }

  Anonymous Function
    //define an anonymous function and assign it to a variable.
    // you can only invoke an Anonymous Function after it's declaration.

Example:
    var calculateArea = function (length, height) {
      var area = length * height;
      return area;
    }

EC6 Syntax:
  calculate(length, height) => {
    var area = lenth * height;
    return area;
  }

Invoking a function:
//calling, invoking or executing a function

Example:
  var squareArea = calculate(2,4.5)
  saveToDatabase(mySpecialThing);  //sometimes we want the function to do something and don't care about a return value

A Function Call vs A Function Convention


A function with an object:

  var person = {
      alive : true,
      eat : function (food) {
          console.log("munch, munch, munch on", food);
      }
  }

function returns: person.eat ('steak') =  Munch, munch, munch on steak


Functional Scope:
  Ex.
  var globalVar = 'global';

    function myFuntion () {

    var localVar = 'local to my function'; <-THIS VARIABLE IS "DECLARED" BY USING 'VAR'
    leakingVar = 'this variable will 'leak' into the global scope and be available outside <-THIS VARIBLE IS 'DEFINED' BUT NEVER EXPLICITLY 'DECLARED' the function'
    console.log(globalVar)
    }

    console.log(localVar);  //undefined
    console.log(leakingVar); //'this variable will "leak" into the global scope and be available outside the function'
